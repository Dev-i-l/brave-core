diff --git a/media/gpu/vaapi/vaapi_picture_tfp.cc b/media/gpu/vaapi/vaapi_picture_tfp.cc
index 9ff0372fa18b652d9ed303e874a9dc5018ccc698..1c917a1f8ed1396d040ad44679086d5228d085aa 100644
--- a/media/gpu/vaapi/vaapi_picture_tfp.cc
+++ b/media/gpu/vaapi/vaapi_picture_tfp.cc
@@ -7,6 +7,7 @@
 #include "media/gpu/vaapi/va_surface.h"
 #include "media/gpu/vaapi/vaapi_wrapper.h"
 #include "ui/base/ui_base_features.h"
+#include "ui/gfx/x/connection.h"
 #include "ui/gfx/x/x11_types.h"
 #include "ui/gl/gl_bindings.h"
 #include "ui/gl/gl_image_glx.h"
@@ -33,7 +34,8 @@ VaapiTFPPicture::VaapiTFPPicture(
                    texture_id,
                    client_texture_id,
                    texture_target),
-      x_display_(gfx::GetXDisplay()),
+      connection_(x11::Connection::Get()),
+      x_display_(connection_->display()),
       x_pixmap_(0) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(!features::IsUsingOzonePlatform());
@@ -49,7 +51,7 @@ VaapiTFPPicture::~VaapiTFPPicture() {
   }
 
   if (x_pixmap_)
-    XFreePixmap(x_display_, x_pixmap_);
+    connection_->FreePixmap({static_cast<x11::Pixmap>(x_pixmap_)});
 }
 
 Status VaapiTFPPicture::Initialize() {
@@ -85,15 +87,20 @@ Status VaapiTFPPicture::Allocate(gfx::BufferFormat format) {
   }
 
   XWindowAttributes win_attr;
-  int screen = DefaultScreen(x_display_);
-  XGetWindowAttributes(x_display_, XRootWindow(x_display_, screen), &win_attr);
+  auto root = connection_->default_root();
+  XGetWindowAttributes(x_display_, static_cast<::Window>(root), &win_attr);
   // TODO(posciak): pass the depth required by libva, not the RootWindow's
   // depth
-  x_pixmap_ = XCreatePixmap(x_display_, XRootWindow(x_display_, screen),
-                            size_.width(), size_.height(), win_attr.depth);
-  if (!x_pixmap_) {
+  auto pixmap = connection_->GenerateId<x11::Pixmap>();
+  if (connection_
+          ->CreatePixmap(
+              {win_attr.depth, pixmap, root, size_.width(), size_.height()})
+          .Sync()
+          .error) {
     DLOG(ERROR) << "Failed creating an X Pixmap for TFP";
     return StatusCode::kVaapiNoPixmap;
+  } else {
+    x_pixmap_ = static_cast<::Pixmap>(pixmap);
   }
 
   return Initialize();
